/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pcreToHLS;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class App {

    public static void main(String[] args)
    {
        String rules_path_name = "/rules";
        String generation_path = System.getProperty("user.home") + "\\Desktop\\generated.c";
        List<String> expressions = new LinkedList<>();
        if (args.length == 0) // read expression from stdin
        {
            Scanner scanner = new Scanner(System.in);
            String expr = scanner.nextLine();
            expressions.add(expr);
            scanner.close();
        }
        else if (args[0].equals("-f")) // read expressions from file
        {
            String file_name = args[1] + ".pcre";
            String rule_path = App.class.getResource(rules_path_name + "/" + file_name).getPath();
            expressions.addAll(getExpressionsFromFile(rule_path));
        }
        else if (args[0].equals("-d")) // read expressions from files in 'resources/rules' directory
        {
            String rules_path = App.class.getResource(rules_path_name).getPath();
            File[] rule_files = new File(rules_path).listFiles();
            for (File rule_file : rule_files)
                expressions.addAll(getExpressionsFromFile(rule_file.getPath()));
        } 
        else 
        {
            System.out.println("invalid arguments");
            System.exit(-1);
        }

        CodeGenerator generator = new CodeGenerator(expressions);
        List<NFA> a = new LinkedList<>(generator.getRegex().values());
        DFA dfa = a.get(0).toDFA();
        System.out.println("\n=== DFA ===");
        dfa.print();
        System.out.println("\n === Analyzer ===");
        generator.getAnalyzer().print();
        generator.generate(generation_path);
        System.out.println("\nMatcher generated in " + generation_path);
    }

    private static List<String> getExpressionsFromFile(String file_path)
    {
        List<String> expressions = new LinkedList<>();
        File rule_file = new File(file_path);
        try {
            BufferedReader reader = new BufferedReader(new FileReader(rule_file));
            String line;
            while ((line = reader.readLine()) != null) {
                String pcre = line.substring(line.indexOf('/') + 1, line.lastIndexOf('/'));
                // String pcre_flags = line.substring(line.lastIndexOf('/') + 1);
                expressions.add(pcre);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return expressions;
    }

}
